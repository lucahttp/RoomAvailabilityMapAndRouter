// Don't use window.onLoad like this in production, because it can only listen to one function.
window.onload = function () {
    var eventsHandler;
    // https://bumbu.me/svg-pan-zoom/demo/mobile.html
    eventsHandler = {
      haltEventListeners: [
        "touchstart",
        "touchend",
        "touchmove",
        "touchleave",
        "touchcancel"
      ],
      init: function (options) {
        var instance = options.instance,
          initialScale = 1,
          pannedX = 0,
          pannedY = 0;
  
        // Init Hammer
        // Listen only for pointer and touch events
        this.hammer = Hammer(options.svgElement, {
          inputClass: Hammer.SUPPORT_POINTER_eventS
            ? Hammer.PointerEventInput
            : Hammer.TouchInput
        });
  
        // Enable pinch
        this.hammer.get("pinch").set({ enable: true });
  
        // Handle double tap
        this.hammer.on("doubletap", function (ev) {
          instance.zoomIn();
        });
  
        // Handle pan
        this.hammer.on("panstart panmove", function (ev) {
          // On pan start reset panned variables
          if (ev.type === "panstart") {
            pannedX = 0;
            pannedY = 0;
          }
  
          // Pan only the difference
          instance.panBy({ x: ev.deltaX - pannedX, y: ev.deltaY - pannedY });
          pannedX = ev.deltaX;
          pannedY = ev.deltaY;
        });
  
        // Handle pinch
        this.hammer.on("pinchstart pinchmove", function (ev) {
          // On pinch start remember initial zoom
          if (ev.type === "pinchstart") {
            initialScale = instance.getZoom();
            instance.zoomAtPoint(initialScale * ev.scale, {
              x: ev.center.x,
              y: ev.center.y
            });
          }
  
          instance.zoomAtPoint(initialScale * ev.scale, {
            x: ev.center.x,
            y: ev.center.y
          });
        });
  
        // Prevent moving the page on some devices when panning over SVG
        options.svgElement.addEventListener("touchmove", function (e) {
          e.preventDefault();
        });
      },
  
      destroy: function () {
        this.hammer.destroy();
      }
    };
  
    // Expose to window namespace for testing purposes
    window.panZoom = svgPanZoom("#svg-id", {
      zoomEnabled: true,
      controlIconsEnabled: false,
      fit: 1,
      center: 1,
      /*
            
                  fit: true,
                  center: true,
                  minZoom: 0.,
                  */
      customEventsHandler: eventsHandler
    });
  
    window.panZoom.zoom(0.8);
  
    
    
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
    const myMoveButton = document.getElementById("move");
    const myResetButton = document.getElementById("reset");
    
    myMoveButton.addEventListener("click", onMoveButtonclick, false);
    function onMoveButtonclick(event) {
      console.log(this.name); // undefined, as `this` is the element
      
      //$("#reset").click();
      myResetButton.click();
      //var bb = $("#target")[0].getBBox();
      var bb = document.querySelector("#target").getBBox();
      var vbb = window.panZoom.getSizes().viewBox;
      var x = vbb.width / 2 - bb.x - bb.width / 2;
      var y = vbb.height / 2 - bb.y - bb.height / 2;
      var rz = window.panZoom.getSizes().realZoom;
      var zoom = vbb.width / bb.width;
      window.panZoom.panBy({ x: x * rz, y: y * rz });
      window.panZoom.zoom(zoom);
    }
    
    /*
    $("#move").on("click", function () {
      $("#reset").click();
      var bb = $("#target")[0].getBBox();
      var vbb = window.panZoom.getSizes().viewBox;
      var x = vbb.width / 2 - bb.x - bb.width / 2;
      var y = vbb.height / 2 - bb.y - bb.height / 2;
      var rz = window.panZoom.getSizes().realZoom;
      var zoom = vbb.width / bb.width;
      window.panZoom.panBy({ x: x * rz, y: y * rz });
      window.panZoom.zoom(zoom);
    });
  */
    
    myResetButton.addEventListener(
    "click",
    function () {
      window.panZoom.fit();
      window.panZoom.center();
      window.panZoom.zoom(1);
    },
  );
    
    
    
  /*   
    document.querySelector("rect").addEventListener(
    "click",
    function () {
      console.log("this is working")
    },
  );*/
    
    
    let elementsArray = document.querySelectorAll("rect");
  
  elementsArray.forEach(function(elem) {
      elem.addEventListener("click", function(event) {
      console.log("this is working")
        
      console.log(event); // undefined, as `this` is the element
      
      //$("#reset").click();
      myResetButton.click();
      //var bb = $("#target")[0].getBBox();
      //var bb = document.querySelector("#target").getBBox();
      var bb = event.target.getBBox();
        console.log(event.target);
      var vbb = window.panZoom.getSizes().viewBox;
      var x = vbb.width / 2 - bb.x - bb.width / 2;
      var y = vbb.height / 2 - bb.y - bb.height / 2;
      var rz = window.panZoom.getSizes().realZoom;
      var zoom = vbb.width / bb.width;
      window.panZoom.panBy({ x: x * rz, y: y * rz });
      window.panZoom.zoom(zoom);
      window.panZoom.zoom(1.5);
          // This function does stuff
      });
  });
  };
  
  
  /*
  
  winget install OpenJS.NodeJS.LTS
  
  npm run install
  npm run start:watch
  
  https://codesandbox.io/s/3q51zkyl5p?file=/src/index.js
  https://codesandbox.io/search?query=&refinementList%5Btemplate%5D%5B0%5D=create-react-app&refinementList%5Bnpm_dependencies.dependency%5D%5B0%5D=svg-pan-zoom&refinementList%5Bnpm_dependencies.dependency%5D%5B1%5D=hammerjs&page=1&configure%5BhitsPerPage%5D=12
  https://github.com/bumbu/svg-pan-zoom
  */