import * as Hammer from 'hammerjs'; // import Hammer from 'hammerjs';
import * as svgPanZoom from 'svg-pan-zoom';//import svgPanZoom from 'svg-pan-zoom';

declare global {
    interface Window {
        zoomVenue: any;
        hammer: any;
    }
}
const eventsHandler = {
    haltEventListeners: [
      "touchstart",
      "touchend",
      "touchmove",
      "touchleave",
      "touchcancel"
    ],
    init(options: { svgElement?: any; instance?: any; }) {
      const { instance } = options;
      let initialScale = 1;
      let pannedX = 0;
      let pannedY = 0;
  
      // Listen only for pointer and touch events
      window.hammer = new Hammer(options.svgElement, {
        inputClass: Hammer.TouchMouseInput
      });
      // Enable pinch
      window.hammer.get("pinch").set({ enable: true });
      // Handle double tap
      window.hammer.on("doubletap", () => {
        instance.zoomIn();
      });
      // Handle pan
      window.hammer.on("panstart panmove", (ev: { type: string; deltaX: number; deltaY: number; }) => {
        // On pan start reset panned variables
        if (ev.type === "panstart") {
          pannedX = 0;
          pannedY = 0;
        }
        // Pan only the difference
        instance.panBy({ x: ev.deltaX - pannedX, y: ev.deltaY - pannedY });
        pannedX = ev.deltaX;
        pannedY = ev.deltaY;
      });
      // Handle pinch
      window.hammer.on("pinchstart pinchmove", (ev: { type: string; scale: number; }) => {
        // On pinch start remember initial zoom
        if (ev.type === "pinchstart") {
          initialScale = instance.getZoom();
          instance.zoom(initialScale * ev.scale);
        }
        instance.zoom(initialScale * ev.scale);
      });
      // Prevent moving the page on some devices when panning over SVG
      options.svgElement.addEventListener("touchmove", (e: { preventDefault: () => void; }) => {
        e.preventDefault();
      });
    },
    destroy() {
        window.hammer.destroy();
    }
  };
  
  export default (el: string | HTMLElement | SVGElement) => {
    window.zoomVenue = svgPanZoom(el, {
        zoomEnabled: true,
        controlIconsEnabled: true,
        fit: true,
        center: true,
        maxZoom: 5,
        preventMouseEventsDefault: false,
        customEventsHandler: eventsHandler
    });
  };
  